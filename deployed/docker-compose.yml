services:
  web:
    build: ..
    ports:
      - "5000:5000"
    volumes:
      - ..:/app
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    env_file:
      - ../.env
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=${DEVELOPMENT:-production}
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 添加 host.docker.internal 解析
    restart: unless-stopped
    networks:
      - fango-network
    command: /start-web.sh  # 只启动 Web 服务

  websocket:
    build: ..
    ports:
      - "8000:8000"  # WebSocket 服务端口
    env_file:
      - ../.env
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - MYSQL_HOST=mysql
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - MONGODB_HOST=mongodb
    restart: unless-stopped
    networks:
      - fango-network
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - mongodb
    command: flask run-with-websocket --host=0.0.0.0 --port=8000

  celery-worker:
    build: ..
    volumes:
      - ..:/app
      - ./logs:/app/logs
    env_file:
      - ../.env
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=${DEVELOPMENT:-production}
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 添加 host.docker.internal 解析
    restart: unless-stopped
    networks:
      - fango-network
    command: /start-celery-worker.sh

  celery-beat:
    build: ..
    volumes:
      - ..:/app
      - ./logs:/app/logs
    env_file:
      - ../.env
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=${DEVELOPMENT:-production}
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 添加 host.docker.internal 解析
    restart: unless-stopped
    networks:
      - fango-network
    command: /start-celery-beat.sh


networks:
  fango-network:
    external: true  # 使用外部网络
    name: fango-network  # 明确指定网络名称